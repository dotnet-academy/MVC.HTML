// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesHub.Models;

namespace MoviesHub.Migrations
{
    [DbContext(typeof(MoviesMvcContext))]
    partial class MoviesMvcContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviesHub.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .HasMaxLength(40);

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(256);

                    b.Property<string>("ShortBio")
                        .HasMaxLength(256);

                    b.HasKey("ActorId");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("MoviesHub.Models.ContentRating", b =>
                {
                    b.Property<byte>("ContentRatingId");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(256);

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("ContentRatingId");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasName("AK_ContentRating_Name");

                    b.ToTable("ContentRating");
                });

            modelBuilder.Entity("MoviesHub.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ContentRatingId");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("VideoPosterUrl")
                        .HasMaxLength(256);

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(256);

                    b.HasKey("MovieId");

                    b.HasIndex("ContentRatingId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MoviesHub.Models.MovieActor", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ActorId");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActor");
                });

            modelBuilder.Entity("MoviesHub.Models.Review", b =>
                {
                    b.Property<int>("ReviewId");

                    b.Property<int>("MovieId");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("ReviewId");

                    b.HasIndex("MovieId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("MoviesHub.Models.Movie", b =>
                {
                    b.HasOne("MoviesHub.Models.ContentRating", "ContentRating")
                        .WithMany("Movie")
                        .HasForeignKey("ContentRatingId");
                });

            modelBuilder.Entity("MoviesHub.Models.MovieActor", b =>
                {
                    b.HasOne("MoviesHub.Models.Actor", "Actor")
                        .WithMany("MovieActor")
                        .HasForeignKey("ActorId");

                    b.HasOne("MoviesHub.Models.Movie", "Movie")
                        .WithMany("MovieActor")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MoviesHub.Models.Review", b =>
                {
                    b.HasOne("MoviesHub.Models.Movie", "Movie")
                        .WithMany("Review")
                        .HasForeignKey("MovieId");
                });
#pragma warning restore 612, 618
        }
    }
}
